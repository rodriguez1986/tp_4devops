
name: Workflow with several triggering events

on:
  push:
    branches: [ 'main' ]

  pull_request:
    branches: [ 'main' ]

jobs:
  lint:
    name: Lint Files
    runs-on: ubuntu-20.04
    timeout-minutes: 10

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ["1.17", "1.18", "1.19"]
        id: go

      - name: Go Lint
        run: make lint

  boilerplate:
    name: Boilerplate Check
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false # Keep running if one leg fails.
      matrix:
        extension:
        - go

        # Map between extension and human-readable name.
        include:
        - extension: go
          language: Go

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ["1.17", "1.18", "1.19"]
        id: go

      - name: Install Tools
        run: |
          TEMP_PATH="$(mk temp -d)"
          cd "$TEMP_PATH"

          echo '::group::üê∂ Installing review dog ... https://github.com/reviewdog/reviewdog'
          curl -sfL https://raw.githubusercontent.com/reviewdog/reviewdog/master/install.sh | sh -s -- -b "${TEMP_PATH}" 2>&1
          echo '::end group::'

          echo '::group:: Installing boilerplate-check ... https://github.com/mattmoor/boilerplate-check'
          go install github.com/matt moor/boilerplate-check/cmd/boilerplate-check@latest
          echo '::end group::'

          echo "${TEMP_PATH}" >> "$GITHUB_PATH"

      - id: boilerplate_txt
        uses: and stor/file-existence-action@v2
        with:
          files: ./hack/boilerplate/boilerplate.${{ matrix.extension }}.txt

      - name: ${{ matrix.language }} license boilerplate
        shell: bash
        if: ${{ steps.boilerplate_txt.outputs.files_exists == 'true' }}
        env:
          REVIEW DOG_GITHUB_API_TOKEN: ${{ github.token }}
        run: |
          set -e
          cd "${GITHUB_WORKSPACE}" || exit 1

          echo '::group:: Running github.com/matt moor/boilerplate-check for ${{ matrix.language }} with review dog üê∂ ...'
          # Don't fail because of boilerplate-check
          set +o pipe fail
          boilerplate-check check \
            --boilerplate ./hack/boilerplate/boilerplate.${{ matrix.extension }}.txt \
            --file-extension ${{ matrix.extension }} \
            --exclude "((vim25/json)|vendor|third_party|dist)/" |
          review dog -efm="%A%f:%l: %m" \
                -efm="%C%.%#" \
                -name="${{ matrix.language }} headers" \
                -reporter="github-pr-check" \
                -filter-mode="diff_context" \
                -fail-on-error="true" \
                -level="error"
          echo '::end group::'
